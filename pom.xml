<?xml version="1.0" encoding="UTF-8"?>
<project
	xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd"
	xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
	<modelVersion>4.0.0</modelVersion>

	<groupId>de.andrehacker</groupId>
	<artifactId>foodbrowser</artifactId>
	<version>0.1-SNAPSHOT</version>
	<name>Food Browser</name>

	<packaging>war</packaging>

	<properties>
		<version.jboss.as.maven.plugin>7.1.1.Final</version.jboss.as.maven.plugin>
		<!-- <org.springframework-version>4.0.1.RELEASE</org.springframework-version> -->
		<org.springframework-version>3.2.7.RELEASE</org.springframework-version>
	</properties>

	<!-- Introduced for spring 4 to get correct dependencies. This project does 
		not use spring 4 yet -->
	<!-- <dependencyManagement> <dependencies> <dependency> <groupId>org.springframework</groupId> 
		<artifactId>spring-framework-bom</artifactId> <version>${org.springframework-version}</version> 
		<type>pom</type> <scope>import</scope> </dependency> </dependencies> </dependencyManagement> -->

	<dependencies>

		<!-- Spring Dependencies -->
		<dependency>
			<groupId>org.springframework</groupId>
			<artifactId>spring-webmvc</artifactId>
			<scope>compile</scope>
			<version>${org.springframework-version}</version>
		</dependency>


		<!-- For json support in REST service -->
		<dependency>
			<groupId>com.fasterxml.jackson.core</groupId>
			<artifactId>jackson-databind</artifactId>
			<version>2.3.0</version>
			<scope>compile</scope>
		</dependency>

		<!-- @Inject -->
		<dependency>
			<groupId>javax.inject</groupId>
			<artifactId>javax.inject</artifactId>
			<version>1</version>
		</dependency>

		<!-- Java EE Servlets. Expected to be "provided" by container, not transitive. -->
		<dependency>
			<groupId>javax.servlet</groupId>
			<artifactId>servlet-api</artifactId>
			<version>2.5</version>
			<scope>provided</scope>
		</dependency>
		<dependency>
			<groupId>javax.servlet</groupId>
			<artifactId>jstl</artifactId>
			<version>1.1.2</version>
			<scope>runtime</scope>
		</dependency>

		<!-- Persistance -->

		<dependency>
			<groupId>org.mongodb</groupId>
			<artifactId>mongo-java-driver</artifactId>
			<version>2.11.4</version>
			<scope>compile</scope>
		</dependency>

		<!-- Tests -->

		<dependency>
			<groupId>org.springframework</groupId>
			<artifactId>spring-test</artifactId>
			<scope>test</scope>
			<version>${org.springframework-version}</version>
		</dependency>
		<dependency>
			<groupId>junit</groupId>
			<artifactId>junit</artifactId>
			<version>4.11</version>
			<scope>test</scope>
		</dependency>
		<dependency>
			<groupId>org.hamcrest</groupId>
			<artifactId>hamcrest-all</artifactId>
			<version>1.3</version>
		</dependency>
		<dependency>
			<groupId>org.mockito</groupId>
			<artifactId>mockito-all</artifactId>
			<version>1.9.5</version>
			<scope>test</scope>
		</dependency>
		<dependency>
			<groupId>com.jayway.jsonpath</groupId>
			<artifactId>json-path</artifactId>
			<version>0.9.1</version>
			<scope>test</scope>
		</dependency>

		<!-- Jersey is reference implementation for JAX-RS (java rest api) + native 
			API. Spring uses own API (http://spring.io/blog/2009/03/08/rest-in-spring-3-mvc/). -->
		<!-- <dependency> <groupId>com.sun.jersey</groupId> <artifactId>jersey-server</artifactId> 
			<version>1.18</version> <scope>compile</scope> </dependency> <dependency> 
			<groupId>com.sun.jersey</groupId> <artifactId>jersey-core</artifactId> <version>1.18</version> 
			<scope>compile</scope> </dependency> <dependency> <groupId>com.sun.jersey</groupId> 
			<artifactId>jersey-json</artifactId> <version>1.18</version> <scope>compile</scope> 
			</dependency> <dependency> <groupId>com.sun.jersey</groupId> <artifactId>jersey-client</artifactId> 
			<version>1.18</version> <scope>compile</scope> </dependency> -->

	</dependencies>

	<build>
		<plugins>
			<plugin>
				<groupId>org.mortbay.jetty</groupId>
				<artifactId>jetty-maven-plugin</artifactId>
				<version>8.1.14.v20131031</version>
			</plugin>
			<!-- Deployment on openshift worked only with version 1.6 -->
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-compiler-plugin</artifactId>
				<version>3.1</version>
				<configuration>
					<source>1.6</source>
					<target>1.6</target>
				</configuration>
			</plugin>
			<!-- Deployent on AS from console -->
			<plugin>
				<groupId>org.jboss.as.plugins</groupId>
				<artifactId>jboss-as-maven-plugin</artifactId>
				<version>${version.jboss.as.maven.plugin}</version>
			</plugin>
		</plugins>
	</build>
	<profiles>
		<profile>
			<id>defaultprofile</id>
			<activation>
				<activeByDefault>true</activeByDefault>
			</activation>
			<build>
				<!-- Required to have the property file in the classpath Will be deactivated 
					automatically if other profiles become active. -->
				<resources>
					<resource>
						<directory>src/main/resources/local</directory>
					</resource>
				</resources>
			</build>
		</profile>
		<profile>
			<!-- When built in OpenShift the 'openshift' profile will be used when invoking mvn. -->
			<!-- Use this profile for any OpenShift specific customization your app  will need. -->
			<!-- By default that is to put the resulting archive into the 'deployments' folder. -->
			<!-- http://maven.apache.org/guides/mini/guide-building-for-different-environments.html -->
			<id>openshift</id>
			<!-- TODO add my property file http://maven.apache.org/plugins/maven-war-plugin/examples/including-excluding-files-from-war.html -->
			<build>
				<!-- Required to have the property file in the classpath -->
				<resources>
					<resource>
						<directory>src/main/resources/openshift</directory>
					</resource>
				</resources>
				<plugins>
					<plugin>
						<artifactId>maven-war-plugin</artifactId>
						<version>2.2</version>
						<configuration>
							<outputDirectory>deployments</outputDirectory>
							<warName>ROOT</warName>
						</configuration>
					</plugin>
				</plugins>
			</build>
		</profile>
	</profiles>
</project>
